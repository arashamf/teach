
use std::io;

fn main() {
    let safe = ('üçè','ü™ô','üçê','ü™ô','üçä','ü™ô','üçì','ü™ô','üçí','ü™ô');

    println!("{}, {}, {}, {}, {}", safe.0, safe.2, safe.4, safe.6, safe.8);

        let tup = (
        "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "–í—Ç–æ—Ä–Ω–∏–∫",
        "–°—Ä–µ–¥–∞",
        "–ß–µ—Ç–≤–µ—Ä–≥",
        "–ü—è—Ç–Ω–∏—Ü–∞",
        "–°—É–±–±–æ—Ç–∞",
    );

    println!("{}, {}, {}", tup.1, tup.3, tup.5);

    /*let mut in_str1 = String::new();
     io::stdin()
        .read_line(&mut in_str1)
        .expect("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏"); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫, –∑–∞—Ç–µ–º –ø–∞—Ä—Å–∏–º

    let mut in_str2 = String::new();
     io::stdin()
        .read_line(&mut in_str2)
        .expect("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏"); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫, –∑–∞—Ç–µ–º –ø–∞—Ä—Å–∏–º

    let mut in_str3 = String::new();
     io::stdin()
        .read_line(&mut in_str3)
        .expect("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏"); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫, –∑–∞—Ç–µ–º –ø–∞—Ä—Å–∏–º

    let mut in_str4 = String::new();
     io::stdin()
        .read_line(&mut in_str4)
        .expect("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏"); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫, –∑–∞—Ç–µ–º –ø–∞—Ä—Å–∏–º

        let mut in_str5 = String::new();
     io::stdin()
        .read_line(&mut in_str5)
        .expect("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏"); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫, –∑–∞—Ç–µ–º –ø–∞—Ä—Å–∏–º

     let str_tup = (in_str1, in_str2, in_str3, in_str4, in_str5);
     println!("{:?}",str_tup);*/

    let mut numb: f64;
    let mut input_string1 = String::new();
    io::stdin()
        .read_line(&mut input_string1)
        .expect("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏"); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    numb = input_string1.trim() .parse().expect("–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º"); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    let a = numb as i32;

    let mut input_string2 = String::new();
         io::stdin()
        .read_line(&mut input_string2)
        .expect("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏"); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    numb = input_string2.trim() .parse().expect("–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º"); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    let b = numb as i32;

    let mut input_string3 = String::new();
         io::stdin()
        .read_line(&mut input_string3)
        .expect("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏"); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    numb = input_string3.trim() .parse().expect("–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º"); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    let c = numb as i32;

    let mut input_string4 = String::new();
         io::stdin()
        .read_line(&mut input_string4)
        .expect("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏"); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    numb = input_string4.trim() .parse().expect("–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º"); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    let d = numb as i32;

    let mut input_string5 = String::new();
         io::stdin()
        .read_line(&mut input_string5)
        .expect("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏"); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    numb = input_string5.trim() .parse().expect("–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º"); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    let e = numb as i32;

    let numb_tup = (a, b, c, d, e, 0);
    println!("{}, {}, {}, {}, {}, {}", numb_tup.0, numb_tup.1,  numb_tup.2,  numb_tup.3,  numb_tup.4,  numb_tup.5);

    let tup = ("–î–æ", "–¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏", 3, 2, 1, 0, "–ø—É—Å–∫!");
    let (i_str, j_str, a, b, c, d, k_str) = tup; // –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è
     println!("{i_str}, {j_str}, {a}, {b}, {c}, {d}, {k_str}");

    let tup_p = (3, 0.1, 0.04, 0.001, 0.0005, 0.00009, 0.000002, 0.0000006);

    let numb_p:f64;
    numb_p= (tup_p.0 as f64) + tup_p.1 + tup_p.2 + tup_p.3 + tup_p.4 + tup_p.5 + tup_p.6 + tup_p.7;
    println!("{}", numb_p);

}